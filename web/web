xml:是可扩展的标记性语言
   作用:1、保存数据，并且这些数据具有描述性
        2、作为项目或模块的配置文件
        3、作为网络传输数据的格式(JSON为主)
javaweb:
    是所有通过java语言编写可以通过浏览器访问的程序总成
    是基于请求和响应来开发的
        请求:是客户端给服务器发送数据，叫请求(Request)
        响应:是服务器给客户端回传数据，叫响应(Response)
    请求和响应成对出现且一一对应
web分类:
 静态资源:html、css、js、txt、...等不变的
 动态资源:jsp页面、Servlet程序
1、BS和CS的异同
CS：客户端服务器架构模式(软件)
   优点：充分利用客户端资源，减轻服务器的负荷
         (一部分安全性不高的计算任务放在客户端执行，不需要把所有的计算和存储都放在服务器端执行，从而减轻服务器的压力，减轻网络符合)
    缺点：需要安装；维护成本较高；
BS：浏览器服务器端架构模式(网页软件)
    优点：客户端不需要安装；维护成本低
    缺点：所有的计算和存储任务都是放在服务器，服务器负荷较中；在服务端计算完成之后把数据传输给客户端，因此客户端和服务器端会进行非常频繁的数据通讯，网络负荷较重
2、Tomcat(web项目的容器/服务器端/WebContainer)
  客户端:Client
  服务器端：Server
  部署：deploy
目录：bin:专门用来存放tomcat服务器的可执行程序
     conf:专门用来存放tomcat配置文件
     lib:专门用来存放tomcat的JAR包
     logs:专门用来存放tomcat运行时输出的日记信息
     temp:专门用来存放tomcat运行时产生的临时数据
     webapps:专门用来存放web工程(一个目录一个工程)
     work:是tomcat工作时的目录，可以用来存放tomcat运行时jsp翻译为Servlet的源码，和Session钝化目录
启动：startup.bat双击   catalina run
停止: tomcat窗口关闭按钮    tomcat窗口置为当前窗口，然后ctrl+c     shutdown.bat  
访问本机Tomcat: http://localhost:8080/
修改端口号:
   tomcat默认端口号:8080
   找到tomcat下的conf,找server.xml,找到Connector标签，修改prot属性为需要的端口号值(1-65535)。修改完端口号,必须重启tomcat服务器
 http协议端口号为：80  (自动抹去) 看不见的端口号就是80
 1、新建web项目，并在Tomcat中
      (1)把web工程目录，拷贝到tomcat目录下的webapps目录下即可
      (2)tomcat下conf目录下的localhost里，创建配置文件:xxx.xml   
             配置文件：<Context path="/web03" docBase="E:\IdeaProjects\JavaWeb\out\artifacts\web03_war_exploded"/>
                      Context:表示工程上下文     path:表示工程的访问路径   docBase:表示工程目录在哪里
  手托html文件到浏览器，使用file协议，直接访问file协议后的路径，步骤网络
  tomcat打开，使用http协议，由http:协议，localhost：ip地址  8080端口号  nihao:工程路径  hello.html:那个文件  走网络
ROOT工程:
    格式：   http://ip:port/  ----> 即没有工程名的就是root工程
     http://ip:port/工程名/   ---->没有资源名，默认访问index,html页面   
一、Servlet
    Servelt:javaEE规范之一。(规范接口)
            是javaweb三大组件之一。(三大组件:Servlt程序、Filter程序、Listener监听器)
            是运行在服务器上的一个java小程序，可以接受客户端发送过来的请求，并响应数据给客户端
    Servlet程序：
         1、编写一个类去实现Servlet接口
         2、实现Servlet方法，处理请求，并响应数据
         3、到web.xml中配置Servlet程序访问地址
         2.5及以前使用xml
          2.5以后使用注解
    功能：1、获取用户(客户端)发给我的数据
         2、调用DAO中的方法完成添加功能
         3、在控制台打印添加成功
   Servelet参数获取方法:
         getParameter();
       web请求分为get、post请求，两个请求执行内容不一样
   一般情况概况下都是使用集成HttpServelet类的方式去实现Servlet程序
      1、编写一个类去集成HttpServelet类
      2、根据业务需要重写doGet和doPost方式
       3、到web.xml中配置Servlet
  Servlet集成关系:
     Servlet接口 
        GenericServlet抽象类
                HttpServlet实现类
    Servlet中的核心方法:初始化:init()、服务:servlet()、销毁:destory()
  服务方法:当有请求过来时，servlet方法会自动响应(其实时tomcat容器调用的)
        在HttpServlet中我们会分析请求的方式：到底是GET、POST、HEAD等八种
        然后决定调用的是那个do开头的方法
        那么在HttpServlet中这些do方法默认的都是405风格-要我们子类去实现对应的方法，否则报405
     因此在新建Servlet时我们才会考虑请求方式，从而决定重写那个do方法
   Servelet生命周期:   从出生到死亡的过程
          1、执行Servlet构造方法
          2、执行init方法(初始化)
          3、执行Servelet方法(服务)
          4、执行destroy方法(销毁)
      1、2是在第一次访问的时候实例化、初始化servlet程序
      3每次访问都会调用
      4web工程在停止时调用
    servlet实例化tomcat只会创建一个，所有请求都是这个实例去响应，默认情况下，第一次请求时，tomcat才会去实例化，初始化然后服务
           优点:提高系统启动速度
           缺点:第一次请求时耗时较长
     因此:如果需要系统的启动速度，默认就可以，如果需要提高响应速度，则需要我们设置Servlet的初始化时机
    servlet初始化时机:
      默认是第一次接受请求时，实例化，初始化
      可以通过<load-on-startuo>来设置servlet启动的先后顺序，数字越小启动越靠前，最小为0
    Servlet在容器中是单例的、线程不安全
         ---->所有的请求都是通过一个实例去响应
          ---->线程不安全：一个线程需要根据这个实例中的某个成员变量值去判断，但中间出现了另一个线程，改变了这个值，那么线程一就执行不了
        启发:尽量不要在servlet中定义成员变量，如果非要定义，那么不要：(1)修改成员变量的值（2）不要进行逻辑判断
二、HTTP协议
   HTTP:超文本传输协议
  HTTP协议:客户端和服务器之间通讯时，发送的数据，需要遵循的规则
   HTTP是无状态的
   作用:就是确定了请求和响应数据的格式  浏览器发送get服务器的数据:请求报文；服务器返还给浏览器的数据:响应报文
   报文：http中的数据
   请求:
       请求行：
         作用:展示当前请求的最基本的信息   
         包含三个部分:请求方式、访问地址、HTTP协议版本(1.0  1.1)           
       请求消息头： key:value 
          作用:通过具体的参数对本次请求进行详细说明
          格式:键值对，键值和值之间用冒号隔开
        HOST:服务器的主机地址
        Accept:声明当前请求能够接受的【媒体类型】
        Referer:当前请求来源页面的地址
        Content-Length:请求体内容的长度
        Content-Type:请求体的内容类型，这一项的具体值是媒体类型中的某一种
        Cookie:浏览器访问服务器是携带的Cookie数据
       请求主体:三种情况
        作用:请求的主体，发送数据给服务器。具体来说就是POST请求方式下的请求参数
        格式:  
        1、get方式，没有请求体，但有一个queryString
        2、post方式，有请求体，from data  当前请求是一个表单提交的请求参数
        3、json格式，有请求体，request payload
    响应:
      响应行:
         包含三个信息:
            协议、响应状态码、响应状态
               状态码:200:正常响应  404:找不到资源 405:请求的方式不支持  500服务器内部错误
      响应头:
          包含了服务器的信息；服务器发送给浏览器的信息(内容的媒体类型、编码、内容长度等)
      响应体:响应的实际内容
  一个<servlet></servlet>标签可以对应多个<servlet-mapping></servlet-mapping>标签
三、会话
   HTTP是无状态的
        - HTTP无状态：  服务器无法判断两次请求是同一个客户端发过来的还是不同服务器发过来的
        - 无状态带来的显示问题: 第一次请求是添加商品到购物车，第二次是请求结账；如果两次请求服务器取法区分是同一个用户，那么就会导致混乱
        -  通过会话跟踪技术解决无状态问题
   会话跟踪技术 
        - 客户第一次发请求给服务器，服务器获取session，获取不到，则创建新的，然后响应给客户端，下次客户端给客户端发送请求时，
        会把sessionID带给服务器，那么服务器就能获取到了，那么服务器就判断这一次请求和上次某次请求时同一个客户端，从而分别客户端
    常用API:
         request.getSession()  ->获取当前会话，没有则创建一个
         request.getSession(ture)   ->效果和不带参数相同
         request.getSession(false)   ->获取当前会话，没有则不会创建新的

         session.getID() ->获取ID
         session.isnew() ->判断当前session是否是新的
         session有效时间半个小时
         session.getMaxinactiveInterval() ->session的非激活间隔时间，半个小时
         session.setMaxinactiveInterval()   ->设置非激活间隔时间
         session.invalidate()               ->然会话立即失效
  session保存作用域:
    session保存作用域适合某个具体的sesson对应的
      session.setAttribute("user","ni");     向当前session保存作用域添加一个值"ni",对应的value为"user"
      session.getAttribute("user");          在session保存作用域中获取取"user"的值
    viod removeAttribute("user");             删除"user"对应的值

四、服务器内部转发及客户端重定向
     服务器内部转发   request.getRequestDispatcher(".....").from(request,response)
             一次请求响应的过程对于客户端而言。服务器端内部经过了几次转发，客户端是不知道的
             地址栏没有变化
     客户端重定向     response.sendRedirect("...");
            两次请求响应的过程，客户端知道请求的url已经发生变化
            地址栏有变化
五、ServletConfig类
      Servlet类程序的配置信息
      Servlet程序和ServletConfig对象都是由Tomcat负责创建，我们负责使用
      Servlet程序默认是第一次访问时创建，servletConfig是每个Servlet程序创建时，就创建一个对应的servletconfig对象
    作用:
       获取Servlet程序的别名servlet-name的值
       获取初始化参数init-name 
        获取ServletContext对象
  ServletContext对象:
      1、是一个接口，表示Servlet上下文对象
      2、一个web工程只有一个servletcontext对象实例
      3、Servlet是一个域对象
       域对象，是可以想map一样存储数据
         这里的域是指存储对象的操作范围，整个项目工程
      4、ServietContext实在web工程启动的时候创建。在web工程停止时销毁
    作用:
     1、获取web,xml配置的上下文参数
     2、获取当前的工程路径  格式:/工程路径
     3、获取工程部署后再服务器磁盘上的绝对路径
     4、像map一样存储数据
六、HttpServletRequest
  作用:每次只要有请求今日tomcat服务器，tomcat服务器就会把请求过来的Http协议信息解析好封装到Request对象中
 然后传递到servlet方法(doGet和doPost)中给我们使用。我们可以通过HttpServletRequest对象，获取所有请求的信息
getRequestURI()  获取请求的资源路径
getRequestURL()   获取请求的统一资源定位符(绝对路径)
getRemoteHost()  获取客户端的ip地址
getHeader()      获取请求头
getMethod()      获取请求的方式GET或POST
七、JSP
  java的服务器页面
本质上是Servlet程序
   

问题:
    1、404：在部署时，修改application Context(应用程序上下文)。然后再回到server选择卡，检查url的值
 url的值指的是tomcat启动完成后自动打开你指定的浏览器，然后默认访问的网址，启动后报404以为找不到资源
    2、405:当前请求的方法不支持
    3、空指针或NumberFormatException:以为有两个值，若其中一个获取不到，结果你想对mull进行Integer.parsetIn()就会报错。原因大部分是name="price"写错
 结果还在request.getParameter("price") 去获取
    4、请求中中文乱码问题：
       tomcat8开始，设置编码，只需针对post即可
           reques.setCharacterEncoding("UTF-8");
       注意:设置编码一定要在所有程序之前
    5、500:服务器内部错误
    6、200:请求成功
    7、302请求重定向
    8、