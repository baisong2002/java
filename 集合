一、集合框架概述
1、集合和数组都是对多个数据进行存储操作的结构，简称java容器
   说明：此时的存储，主要是指内存层面的存储，不涉及持久化的存储
2、数组在存储多个数据方面的特点：
   >一旦初始化以后，其长度就确定了。
   >数组一旦定义好，数组数组元素的类型就确定了，只能操作指定类型的数据
   缺点：
   >一旦初始化后，其长度不可修改
   >数组中提供的方法非常有限，对于添加、删除、插入数据等操作，非常不便，效率不高
   >获取数组中实际元素的个数的需求，数组没有线程的属性或方法可用
   >存储数据的特点：有序、可重复，对于无序、不可重复的需求，不能满足
二、集合框架
java集合分为Collection和Map两种体系
  Collection接口：单列数据，定义存储一组对象的方法的集合
       List：元素有序、可重复的集合  --> "动态数组"
             ArrayList、LinkdList、Vector
       Set：元素无序，不可重复的集合  -->"高中讲的集合"
             HahSet、LinkedHashSet、TreeSet
  Map接口：双列数据，保证具有映射关系“key-value对”（一对一对）的集合      -->高中函数y=f(x)
             HashMap、LinkedHashMap、TreeMap、Hashtable、Properties
一个value可能对应多个key,即：多个key可能对应一个value,但一个key只能对应一个value       
1、Collection接口方法使用（十五个方法）：
注意：向Collection接口的实现类的对象添加obj时，要求obj所在类要重写equals()方法
 （1）add();  addAll();  size();  isEmpty();   clear(); 
//add(Object e):将元素e添加到集合b中
      Collection b=new ArrayList();
          b.add("nihao");
          b.add(123);//自动装箱
          b.add(new Date());
          //size()：获取添加的元素个数
          System.out.println(b.size());//3
           //addAll（Colletion a）：将a集合的元素添加到当前集合中
    ArrayList a=new ArrayList();
            a.add(125);
            b.addAll(a);
        System.out.println(b.size());//4
        System.out.println(b);
          //isEmpty():判断当前集合是否为空
        System.out.println(b.isEmpty());//flast
        //clear（）:清空集合的数据
        b.clear();
        System.out.println(b.isEmpty());//ture
   (2)contains(Object obj);  containsAll(Colletion a);  remove(Object obj);  removeAll(Object b);  
      retainAll(Conlltection b);  equals(Object obj);   hashCode();   toArray();    Arrays.asList();
      Collection a=new ArrayList();
        a.add(123);
        a.add(456);

        Collection b=Arrays.asList(123,456);
         //contains（Object obj）：判断当前集合中是否包含obj
      /*  System.out.println(a.contains("你好"));
        //containsAll(Collection a):判断形参a中所有元素是否都存在于当前集合中

        System.out.println(a.containsAll(b));//ture
        //remove(Object obj):从当前集合中移除（删除）obj
        a.remove(123);
        System.out.println(a);
        //removeAll(Collection b):差集：从当前集合中移除b
        a.removeAll(b);
        System.out.println(a);
        //retainAll(Collection b):交集：获取当前集合和b集合的交集
       a.retainAll(b);
        System.out.println(a);//[]:前面已删除
        //equals(Object obj):判断当前集合和形参集合元素是否相同
        System.out.println(a.equals(b));

        //hashCode();返回当前对象的哈希值
        System.out.println(a.hashCode());
        //toArray:集合--->数组
        Object []d= a.toArray();
        for (int i=0;i<d.length;i++){
            System.out.println(d[i]);
        }
        //拓展：数组-->集合:调用Arrays类的静态方法asList()
        List<String> n = Arrays.asList(new String[]{"1", "2","3" });
        System.out.println(n);
        //注意：除了String类型，其他数据类型都需要运用包装类
        List  m=Arrays.asList(new Integer[]{1,2,3});
        System.out.println(m);
       */
（3）iterator():返回Iterator接口的实例，用于遍历集合。
  Collection a=new ArrayList();
        a.add(123);
        a.add(456);
       /*iterator():返回Iterator接口的实例，用于遍历集合。
        iterator对象称为迭代器（设计模式的一种）
        */
        Iterator d = a.iterator();
方式一：
      //  System.out.println(d.next());//123
方式二：
      /*  for (int i=0;i<a.size();i++){
            System.out.println(d.next());
        }//123
       */
方式三：
        while (d.hasNext()){
            System.out.println(d.next());
        }//123
//集合元素的遍历操作，使用迭代器Iterator接口
        /*内部的方法：hasNext()和next()
     集合对象每次调用iterator()方法都得到一个全新的迭代器对象
     默认游标都在集合的第一个元素之前
     内部定义了remove(),可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()
     如果还未next（）调用或在上一次调用next（）方法后已经调用remove()方法，再调用remove()方
      法会报错
      */
        Collection A=new  ArrayList();
        A.add(123);
        A.add("nihao");
        A.add(456);
        Iterator b=A.iterator();
        while (b.hasNext()){
            Object o=b.next();
            if ("nihao".equals(o)){
                b.remove();
            }
        }
    b=A.iterator();
        while (b.hasNext()){
            System.out.println(b.next());
        }      
方式四：增强foreach循环
        Collection a=new ArrayList();
        a.add(123);
        a.add(456);
        a.add("tom");
        //for(  集合中元素的类型 局部变量  ： 集合对象）
         //内部仍然调用迭代器
        for (Object b:a){
            System.out.println(b);
        }
三、List接口：
ArrayList:作为List接口的主要实现类，线程不安全，执行效率高；底层使用Object【】储存
LinkedList:底层使用双向链表存储，对于频繁的插入和删除操作比使用ArrayList效率高
Vector:作为List接口古老实现类，线程安全，效率低；底层使用Object【】储存
相同点：三个类都实现了List接口，存储数据的特点相同
（1）ArrayList：
ArrayList a=new ArrayList();
      a.add(123);
      a.add(456);
      a.add(79);
       a.add(123);
       System.out.println(a);
      //void add(int index,Object ele):在index位置插入ele元素
      a.add(1,123);
        System.out.println(a);//[123, 123, 456, 79, 123]
      //boolean addAll(int index,Collction eles):从index位置开始将eles中的所有元素添加进来
        List b= Arrays.asList(1,2,3);
        a.addAll(b);
        System.out.println(a.size());//9
      //Object get(int index):获取指定index位置的元素
        System.out.println(a.get(0));//123
        //int indexOf(Object obj):返回obj在当前集合中首次出现的位置
        int c= a.lastIndexOf(79);
        System.out.println(c);//3
        //int lastIndexof(Object obj):返回obj在当前集合中末次出现的位置,如果不存在则返回-1
        int d=a.lastIndexOf(123);
        System.out.println(d);//4
        //Objece remove(int index):移除指定index位置的元素，并返回此元素
        // 可以按照索引删除，也可以按照元素删除
        a.remove(1);
        System.out.println(a);//[123, 79, 123]
        //Object set(int index,Object ele):设置指定index位置的元素ele
        a.set(0,"bnihao");
        System.out.println(a);//[bnihao, 79, 123]
        //List sudList(int formIndex,int toIndex):返回从fromIndex到toIndex位置的子集合
        //(左闭右开）
        System.out.println(a.subList(1,2));//[79]
    常用方法：
    增：add(Object obj)
    删：remove(int index)/remove(Object obj)
    改：set(int index,Object obj)
    查：get(int index)
    插：add(int index,Object obj)
    长度：size()
    遍历：(1)Iterator迭代器
          （2）增强for()循环 
          （3）普通循环
遍历： ArrayList a=new ArrayList();
      a.add(123);
      a.add(456);
      a.add(79);
       a.add(123);
       //Interator迭代器
       Iterator b=a.iterator();
       while (b.hasNext()){
           System.out.println(b.next());
       }
       //增强for()循环
        for (Object c:a){
            System.out.println(c);
        }
    }
四、set接口：
无序的，不重复的 --->"集合"
无序性：不等于随机性；已HashSet为例，存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值
不重复性：
例子：
 Set a=new HashSet();
      a.add(123);
      a.add("nihao");
      a.add(456);
        Iterator b = a.iterator();
        while (b.hasNext()){
            System.out.println(b.next());
        }
    ***输出结果：nihao 456 123***

不重复：保证添加的元素按照equals()方法判断时。不能返回ture,即：相同的元素只能添加一个
例子：
 Set a=new HashSet();
      a.add(123);
      a.add("nihao");
      a.add(456);
      a.add(123);
      for (Object b:a){
          System.out.println(b);
      }
    ***输出结果：nihao 456 123***
HashSet:主要实现类：线程不安全；可以存储null值
  LinkedHashSet:HashSet的子类；遍历其每部数据时，可以按照添加的顺序遍历
TreeSet:可以按照添加的对象的指定属性，进行排序
set没有额外定义新的方法，都是使用Collection中声明过的方法