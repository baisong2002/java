是一个独立于特定数据库管理系统，通用的SQL数据库存取和操作的公共接口
一、获取数据库连接
 1、Driver接口：
    url:jdbc
*****************************************************************************************
Driver d=new com.mysql.cj.jdbc.Driver();
        /*
        url:http://localhost:8080/gmall/keyboard.jpg
        jdbc:mysql协议
        localhost:ip地址
        3306:端口号
        test:test数据库
         */
        String url="jdbc:mysql://localhost:3306/";
        //将用户名和密码封装在Properties中
        Properties info=new Properties();
       info.setProperty("user","root");
       info.setProperty("password","root");
        Connection conn = d.connect(url, info);

        System.out.println(conn);
***********************************************************************************
2、对方式一的迭代，在如下程序中不出现第三方的API，是的程序有很好的移植性
//获取Driver实现类对象，使用反射
        Class<?> c = Class.forName("com.mysql.cj.jdbc.Driver");
        Driver d =(Driver) c.newInstance();
        //2、提供要连接的数据库
        String url="jdbc:mysql://localhost:3306/sys";
        //3、提供用户名和密码
        Properties p = new Properties();
        p.setProperty("user","root");
        p.setProperty("password","root");
        //4、获取连接
        Connection a = d.connect(url, p);
        System.out.println(a);
****************************************************************************************、
3、 DriverManager替换Driver
  //1、获取Driver实现类对象
        Class<?> c = Class.forName("com.mysql.cj.jdbc.Driver");
        Driver o =(Driver) c.newInstance();
        //2、提供另外三个连接的基本信息
        String url="jdbc:mysql://localhost:3306/sys";
        String user="root";
        String password="root";
        //注册驱动
        DriverManager.registerDriver(o);
        //获取链接
        Connection a = DriverManager.getConnection(url, user, password);
        System.out.println(a);
*****************************************************************************************************
4、优化
 //1、提供三个连接的基本信息
    String url="jdbc:mysql://localhost:3306/sys";
    String user="root";
    String password="root";
    //2、获取Driver实现类对象
    Class.forName("com.mysql.cj.jdbc.Driver");
    //3、获取连接
    Connection a = DriverManager.getConnection(url, user, password);
    System.out.println(a);
***********************************************************************************************
相较于方式三可以省略注册驱动
    原因：在mysql的Driver实现类中，声明了静态方法，而静态方法随着类的加载而加载
第二步可以省略，连接MySQL数据库可以省略，其他数据库则不行
5、
  @Test//(final)将数据库连接需要的4个基本信息声明在配置文件中，通过读取配置文件的方式获取连接
    public void A() throws Exception {
        //读取配置文件的基本信息
        InputStream i = test5.class.getClassLoader().getResourceAsStream("jdbc.properties");
        Properties p = new Properties();
        p.load(i);
        String user = p.getProperty("user");
        String password = p.getProperty("password");
        String url= p.getProperty("url");
        String driverClass = p.getProperty("driverClass");
        //2、加载驱动
        Class.forName(driverClass);
        //3、获取连接
        Connection c = DriverManager.getConnection(url, user, password);
        System.out.println(c);
    }
********************************************************************************************************
好处：实现了数据和代码的分离。实现了解耦
     如果需要修改配置文件信息，可以避免程序重新打包
二、使用PreparedStatement实现增删改查(CRUD)
     PreparedStatement p1 = null;
        Connection c = null;
        try {
            //读取配置文件
            InputStream i = ClassLoader.getSystemClassLoader().getResourceAsStream("jdbc.properties");
            Properties p = new Properties();
            p.load(i);
            String user = p.getProperty("user");
            String password = p.getProperty("password");
            String url = p.getProperty("url");
            String driverClass = p.getProperty("driverClass");
            //2、加载驱动
            Class.forName(driverClass);
            //3、获取连接
            c = DriverManager.getConnection(url, user, password);
            //System.out.println(c);
            //向表bai1添加一条记录
            //编译sql语句，返回PreparedStatement的实例
            String sql = "insert into bai1(id,name)values(?,?)";//?:占位符
            p1 = c.prepareStatement(sql);
            //填充占位符
            p1.setInt(1, 01);
            p1.setString(2,"邓浩");
            //执行SQL操作
            p1.execute();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } finally {
            //资源关闭
            try {
                if (p1 != null) {
                    p1.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (c != null) {
                    c.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
********************************************************************************************
 /*
    通用的增删改操作
     */
    public void update(String sql,Object  ...arg){//sql当中占位符的个数应该与可变形参的长度相同
        Connection c = null;
        PreparedStatement p =null;
        try {
            //1、获取连接
            c = JDBCutils.getConnection1();
            //2、预编译sql语句，返回prepareStatement的实例
            p = c.prepareStatement(sql);
            //3、填充占位符
            for (int i=0;i<arg.length;i++){
                p.setObject(i+1,arg[i]);//小心参数声明错误
            }
            //执行
            p.execute();
        } catch (Exception e) {
            e.printStackTrace();
        }finally {

            //关闭资源
            JDBCutils.close(c,p);
        }
    }
    @Test
    public void testA(){
        String sql="delete from bai1 where id=?";
        update(sql,1);
    }
*******************************************************************************************************
  @Test
    public void A() {
        Connection c = null;
        PreparedStatement p =null;
        ResultSet r =null;
        try {
            c = JDBCutils.getConnection1();
            String sql="select id,name from bai1 where id=?";
            p = c.prepareStatement(sql);
            p.setObject(1,1);
            //执行，并返回结果集
            r = p.executeQuery();
            //处理结果集
            //next():（1）如果有数据返回ture指针下移（2）判断下个位置是否有元素
            if (r.next()){
                //获取当前这条数据的各个字段值
                int a = r.getInt(1);
                String s = r.getString(2);
                /*
                //方式一：直接输出
                System.out.println("id:"+a+"name:"+s);
                //方式二：封装在数组中
                Object[]b=new Object[]{a,s};
                */
                //方式三：封装在一个类的对象中
                bean bean = new bean(a,s);
                System.out.println(bean);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }finally {
            //关闭资源
            JDBCutils.close1(c,p,r);

        }