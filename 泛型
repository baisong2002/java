一、什么是泛型？
泛型：标签 把元素的类型设计成一个参数，这个类型参数叫泛型
  JDK5.0设计 
所谓的泛型就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。
这个类型参数将在使用时确定
泛型的使用：
泛型不能是基本数据类型，可以是包装类
泛型可以嵌套
在集合中使用泛型：
（1）集合接口或集合类在jdk5.0以后都修改为带泛型的结构
 （2）在实例化集合类时，可以指明具体的类型泛型
 （3）在指明完后，在集合类或接口凡是定义类或接口时，内部结构使用到类的泛型的位置，都指定为实例化时的泛型
    比如：add(E e)---->实例化后：add(Integer e)
   (4)泛型的类型必须是类，不能是基本数据类型。用包装类
  （5）如果实例化时，没有指明泛型的类型。默认类型是：java.lang.Object类型
自定义泛型结构：泛型类、泛型接口、泛型方法
1、关于自定义泛型类、泛型接口
    如果定义了泛型类，实例化没有指明类的泛型，则认为此泛型类型为Object类型
    注意：泛型类可以有多个参数
          泛型类构造器：public viod 类名（）{}
          实例化后，操作原来泛型位置的结构必须与指定的泛型一致
          泛型不同的引用不能相互赋值
          泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价于Object
          如果泛型结构是个接口或者抽象类，则不可创建泛型类的对象
          泛型类/接口中，静态方法不能使用泛型类
          异常类不能是泛型
          定义泛型数组：不能使用new E[],但可以E[] elements=(E[])new Object[capacity]; 
          父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型
                子类不保留父类的泛型
                    没有类型擦除
                    具体类型
                子类保留父类的泛型
                    全部保留
                    部分保留
2、泛型方法：
    在方法中出现了泛型的结构，泛型参数与类的泛型没有关系
      即泛型方法所属的类是不是泛型类都没有关系
     泛型方法在调用时指明泛型参数的类型
     泛型方法可以使用静态staic修饰。原因：泛型参数是在调用方法时确定，并不是在实例化类时确定
3、泛型在继承方面的体现：
  虽然类A是类B的父类，但是G<A>和G<B>二者不具备子父类关系，二者完全的并列关系。
   补充：类A是类B的父类，A<G>是B<G>的父类
4、通配符的使用：
     通配符：？
    类A是类B的父类，G<A>和G<B>是没有关系的，二者共同的父类是:G<？>
    使用通配符，则不能向其内部添加数据。（除了添加null之外。）
    允许读取数据，读取的数据类型是Object
5、有限制条件的通配符的使用：
    ? extend A:
             G <? extend A>可以作为G<A>和G<B>的父类的，其中B是A的子类
                    <=
     ?  super A:
             G <? super A>可以作为G<A>和G<B>的父类，其中B是A的父类
                   >=
